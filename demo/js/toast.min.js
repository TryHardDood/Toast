"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var s=0;s<e.length;s++){var a=e[s];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}function _createClass(t,e,s){return e&&_defineProperties(t.prototype,e),s&&_defineProperties(t,s),t}var CONTAINER_CLASS="toast-container",WRAPPER_CLASS="toast-wrapper",BsToast=function(){function t(e){var s=e.title,a=e.subtitle,i=e.content,o=e.type,n=e.delay,c=e.position,l=e.img,h=e.pause_on_hover;_classCallCheck(this,t),this.id="toast-"+(document.getElementsByClassName("toast").length+1),this.title=s||"Notice!",this.subtitle=a||"",this.content=i||"",this.type=o||"info",this.delay=n||-1,this.position=c||"top-right",this.img=l,this.pause_on_hover=h||!1,this.pause=!1,this.bg_header_class="",this.fg_header_class="",this.fg_subtitle_class="text-muted",this.fg_dismiss_class="",this.delay_or_autohide="",this.setupLayout(),this.createToast()}return _createClass(t,[{key:"setupLayout",value:function(){if(!document.getElementsByClassName(CONTAINER_CLASS+" "+this.position).length){var t=document.createElement("div");t.className=CONTAINER_CLASS+" "+this.position,document.body.insertBefore(t,document.body.firstChild)}if(!document.getElementsByClassName(CONTAINER_CLASS+" "+this.position)[0].hasChildNodes()){var e=document.createElement("div");e.className=WRAPPER_CLASS,document.getElementsByClassName(CONTAINER_CLASS+" "+this.position)[0].append(e)}}},{key:"createToast",value:function(){var e=this;if(!1!==this.pause_on_hover){var s=Math.floor(Date.now()/1e3)+this.delay/1e3;this.delay_or_autohide='data-autohide="false"',this.pause_on_hover='data-hide-timestamp="'.concat(s,'"')}else-1===this.delay?this.delay_or_autohide='data-autohide="false"':this.delay_or_autohide='data-delay="'.concat(this.delay,'"');switch(this.type){case"info":this.bg_header_class="bg-info",this.fg_header_class="text-white",this.fg_subtitle_class="text-white",this.fg_dismiss_class="text-white";break;case"success":this.bg_header_class="bg-success",this.fg_header_class="text-white",this.fg_subtitle_class="text-white",this.fg_dismiss_class="text-white";break;case"warning":case"warn":this.bg_header_class="bg-warning",this.fg_header_class="text-white",this.fg_subtitle_class="text-white",this.fg_dismiss_class="text-white";break;case"error":case"danger":this.bg_header_class="bg-danger",this.fg_header_class="text-white",this.fg_subtitle_class="text-white",this.fg_dismiss_class="text-white"}var a='\n<div id="'.concat(this.id,'" class="toast" role="alert" aria-live="assertive" aria-atomic="true" ').concat(this.delay_or_autohide," ").concat(this.pause_on_hover,'>\n  <div class="toast-header ').concat(this.bg_header_class," ").concat(this.fg_header_class,'">');void 0!==this.img&&(a+='<img src="'.concat(this.img.src,'" class="').concat(this.img.class||"",' mr-2" alt="').concat(this.img.alt||"Image",'" ').concat(void 0!==this.img.title?'data-toggle="tooltip" title="'+this.img.title+'"':"",">")),a+='\n    <strong class="mr-auto">'.concat(this.title,'</strong>\n    <small class="').concat(this.fg_subtitle_class,'">').concat(this.subtitle,'</small>\n    <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">\n      <span aria-hidden="true" class="').concat(this.fg_dismiss_class,'">&times;</span>\n    </button>\n  </div>'),console.log(this.content),""!==this.content&&(a+='<div class="toast-body">\n                        '.concat(this.content,"\n                      </div>")),a+="\n</div>\n";var i=document.createElement("div");i.innerHTML=a;var o=document.getElementsByClassName(CONTAINER_CLASS+" "+this.position)[0].firstChild.appendChild(i);if(t.toggleToast(this.id),!1!==this.pause_on_hover){setTimeout(function(){e.pause||t.toggleToast(e.id,!0)},this.delay),o.addEventListener("mouseover",function(){e.pause=!0});o.addEventListener("mouseleave",function(){var s=Math.floor(Date.now()/1e3),a=parseInt(o.children[0].dataset.hideTimestamp);e.pause=!1,s>=a&&t.toggleToast(e.id,!0)})}}}],[{key:"toggleToast",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(window.jQuery||window.$)$("#".concat(t)).toast(e?"hide":"show");else{var s=new bootstrap.Toast(document.getElementById(t));e?s.hide():s.show()}}}]),t}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvYXN0LmpzIl0sIm5hbWVzIjpbIkNPTlRBSU5FUl9DTEFTUyIsIldSQVBQRVJfQ0xBU1MiLCJCc1RvYXN0IiwiX3JlZiIsInRpdGxlIiwic3VidGl0bGUiLCJjb250ZW50IiwidHlwZSIsImRlbGF5IiwicG9zaXRpb24iLCJpbWciLCJwYXVzZV9vbl9ob3ZlciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJpZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImxlbmd0aCIsInBhdXNlIiwiZmdfaGVhZGVyX2NsYXNzIiwiZmdfc3VidGl0bGVfY2xhc3MiLCJzZXR1cExheW91dCIsImNyZWF0ZVRvYXN0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImNvbnRhaW5lciIsImJvZHkiLCJmaXJzdENoaWxkIiwiaGFzQ2hpbGROb2RlcyIsImJnX2hlYWRlcl9jbGFzcyIsImFwcGVuZCIsIndyYXBwZXIiLCJoaWRlX3RpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJkZWxheV9vcl9hdXRvaGlkZSIsImNvbmNhdCIsImZnX2Rpc21pc3NfY2xhc3MiLCJodG1sIiwic3JjIiwiYWx0IiwiY29uc29sZSIsInRvYXN0RWwiLCJpbm5lckhUTUwiLCJsb2ciLCJhcHBlbmRDaGlsZCIsInRvZ2dsZVRvYXN0IiwiZWxlbWVudCIsIl90aGlzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImN1cnJlbnQiLCJmdXR1cmUiLCJwYXJzZUludCIsImNoaWxkcmVuIiwiZGF0YXNldCIsImhpZGVUaW1lc3RhbXAiLCJzZXRUaW1lb3V0IiwidGltZW91dCIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsIndpbmRvdyIsInRvYXN0IiwiYm9vdHN0cmFwIiwiVG9hc3QiLCJnZXRFbGVtZW50QnlJZCIsImhpZGUiLCJzaG93Il0sIm1hcHBpbmdzIjoibVpBQUEsSUFBTUEsZ0JBQWtCLGtCQUNsQkMsY0FBZ0IsZ0JBRWhCQyxtQkFFRixTQUFBQSxF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QUFBQSxPQUFROEMsUUFBUmMsT0FBeUJoRCxFQUdqQ21DLEVBQUFBLElBQUFBLE9BQVFFLElBQUFBLE1BQUFBLEVBQWlCLE9BQXpCLFlBSFEsQ0FDSCxJQUFBWSxFQUFBLElBQUFDLFVBQUFDLE1BQUFsRCxTQUFBbUQsZUFBQXBELElBUkxxRCxFQUFBSixFQUFBSSxPQUFBSixFQUFBSyIsImZpbGUiOiJ0b2FzdC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDT05UQUlORVJfQ0xBU1MgPSBcInRvYXN0LWNvbnRhaW5lclwiO1xyXG5jb25zdCBXUkFQUEVSX0NMQVNTID0gXCJ0b2FzdC13cmFwcGVyXCI7XHJcblxyXG5jbGFzcyBCc1RvYXN0IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih7dGl0bGUsIHN1YnRpdGxlLCBjb250ZW50LCB0eXBlLCBkZWxheSwgcG9zaXRpb24sIGltZywgcGF1c2Vfb25faG92ZXJ9KSB7XHJcbiAgICAgICAgdGhpcy5pZCA9ICd0b2FzdC0nICsgKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3RvYXN0JykubGVuZ3RoICsgMSk7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlIHx8ICdOb3RpY2UhJztcclxuICAgICAgICB0aGlzLnN1YnRpdGxlID0gc3VidGl0bGUgfHwgJyc7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudCB8fCAnJztcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlIHx8ICdpbmZvJztcclxuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXkgfHwgLTE7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uIHx8ICd0b3AtcmlnaHQnO1xyXG4gICAgICAgIHRoaXMuaW1nID0gaW1nO1xyXG4gICAgICAgIHRoaXMucGF1c2Vfb25faG92ZXIgPSBwYXVzZV9vbl9ob3ZlciB8fCBmYWxzZTtcclxuICAgICAgICB0aGlzLnBhdXNlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuYmdfaGVhZGVyX2NsYXNzID0gJyc7XHJcbiAgICAgICAgdGhpcy5mZ19oZWFkZXJfY2xhc3MgPSAnJztcclxuICAgICAgICB0aGlzLmZnX3N1YnRpdGxlX2NsYXNzID0gJ3RleHQtbXV0ZWQnO1xyXG4gICAgICAgIHRoaXMuZmdfZGlzbWlzc19jbGFzcyA9ICcnO1xyXG5cclxuICAgICAgICB0aGlzLmRlbGF5X29yX2F1dG9oaWRlID0gJyc7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0dXBMYXlvdXQoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVRvYXN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0dXBMYXlvdXQoKSB7XHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKENPTlRBSU5FUl9DTEFTUyArICcgJyArIHRoaXMucG9zaXRpb24pLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBDT05UQUlORVJfQ0xBU1MgKyAnICcgKyB0aGlzLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZShjb250YWluZXIsIGRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoQ09OVEFJTkVSX0NMQVNTICsgJyAnICsgdGhpcy5wb3NpdGlvbilbMF0uaGFzQ2hpbGROb2RlcygpKSB7XHJcbiAgICAgICAgICAgIGxldCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gV1JBUFBFUl9DTEFTUztcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShDT05UQUlORVJfQ0xBU1MgKyAnICcgKyB0aGlzLnBvc2l0aW9uKVswXS5hcHBlbmQod3JhcHBlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVRvYXN0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBhdXNlX29uX2hvdmVyICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBjb25zdCBoaWRlX3RpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApICsgKHRoaXMuZGVsYXkgLyAxMDAwKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGVsYXlfb3JfYXV0b2hpZGUgPSAnZGF0YS1hdXRvaGlkZT1cImZhbHNlXCInO1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlX29uX2hvdmVyID0gYGRhdGEtaGlkZS10aW1lc3RhbXA9XCIke2hpZGVfdGltZXN0YW1wfVwiYDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZWxheSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsYXlfb3JfYXV0b2hpZGUgPSAnZGF0YS1hdXRvaGlkZT1cImZhbHNlXCInO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWxheV9vcl9hdXRvaGlkZSA9IGBkYXRhLWRlbGF5PVwiJHt0aGlzLmRlbGF5fVwiYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnaW5mbyc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJnX2hlYWRlcl9jbGFzcyA9ICdiZy1pbmZvJztcclxuICAgICAgICAgICAgICAgIHRoaXMuZmdfaGVhZGVyX2NsYXNzID0gJ3RleHQtd2hpdGUnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mZ19zdWJ0aXRsZV9jbGFzcyA9ICd0ZXh0LXdoaXRlJztcclxuICAgICAgICAgICAgICAgIHRoaXMuZmdfZGlzbWlzc19jbGFzcyA9ICd0ZXh0LXdoaXRlJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnc3VjY2Vzcyc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJnX2hlYWRlcl9jbGFzcyA9ICdiZy1zdWNjZXNzJztcclxuICAgICAgICAgICAgICAgIHRoaXMuZmdfaGVhZGVyX2NsYXNzID0gJ3RleHQtd2hpdGUnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mZ19zdWJ0aXRsZV9jbGFzcyA9ICd0ZXh0LXdoaXRlJztcclxuICAgICAgICAgICAgICAgIHRoaXMuZmdfZGlzbWlzc19jbGFzcyA9ICd0ZXh0LXdoaXRlJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnd2FybmluZyc6XHJcbiAgICAgICAgICAgIGNhc2UgJ3dhcm4nOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5iZ19oZWFkZXJfY2xhc3MgPSAnYmctd2FybmluZyc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZnX2hlYWRlcl9jbGFzcyA9ICd0ZXh0LXdoaXRlJztcclxuICAgICAgICAgICAgICAgIHRoaXMuZmdfc3VidGl0bGVfY2xhc3MgPSAndGV4dC13aGl0ZSc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZnX2Rpc21pc3NfY2xhc3MgPSAndGV4dC13aGl0ZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcclxuICAgICAgICAgICAgY2FzZSAnZGFuZ2VyJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuYmdfaGVhZGVyX2NsYXNzID0gJ2JnLWRhbmdlcic7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZnX2hlYWRlcl9jbGFzcyA9ICd0ZXh0LXdoaXRlJztcclxuICAgICAgICAgICAgICAgIHRoaXMuZmdfc3VidGl0bGVfY2xhc3MgPSAndGV4dC13aGl0ZSc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZnX2Rpc21pc3NfY2xhc3MgPSAndGV4dC13aGl0ZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBodG1sID0gYFxyXG48ZGl2IGlkPVwiJHt0aGlzLmlkfVwiIGNsYXNzPVwidG9hc3RcIiByb2xlPVwiYWxlcnRcIiBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIiBhcmlhLWF0b21pYz1cInRydWVcIiAke3RoaXMuZGVsYXlfb3JfYXV0b2hpZGV9ICR7dGhpcy5wYXVzZV9vbl9ob3Zlcn0+XHJcbiAgPGRpdiBjbGFzcz1cInRvYXN0LWhlYWRlciAke3RoaXMuYmdfaGVhZGVyX2NsYXNzfSAke3RoaXMuZmdfaGVhZGVyX2NsYXNzfVwiPmA7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5pbWcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGh0bWwgKz0gYDxpbWcgc3JjPVwiJHt0aGlzLmltZy5zcmN9XCIgY2xhc3M9XCIkeyh0aGlzLmltZy5jbGFzcyB8fCAnJyl9IG1yLTJcIiBhbHQ9XCIkeyh0aGlzLmltZy5hbHQgfHwgJ0ltYWdlJyl9XCIgJHsodHlwZW9mIHRoaXMuaW1nLnRpdGxlICE9PSAndW5kZWZpbmVkJyA/ICdkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiB0aXRsZT1cIicgKyB0aGlzLmltZy50aXRsZSArICdcIicgOiAnJyl9PmA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBodG1sICs9IGBcclxuICAgIDxzdHJvbmcgY2xhc3M9XCJtci1hdXRvXCI+JHt0aGlzLnRpdGxlfTwvc3Ryb25nPlxyXG4gICAgPHNtYWxsIGNsYXNzPVwiJHt0aGlzLmZnX3N1YnRpdGxlX2NsYXNzfVwiPiR7dGhpcy5zdWJ0aXRsZX08L3NtYWxsPlxyXG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJtbC0yIG1iLTEgY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJ0b2FzdFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxyXG4gICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIiBjbGFzcz1cIiR7dGhpcy5mZ19kaXNtaXNzX2NsYXNzfVwiPiZ0aW1lczs8L3NwYW4+XHJcbiAgICA8L2J1dHRvbj5cclxuICA8L2Rpdj5gO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY29udGVudCk7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudCAhPT0gJycpIHtcclxuICAgICAgICAgICAgaHRtbCArPSBgPGRpdiBjbGFzcz1cInRvYXN0LWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHt0aGlzLmNvbnRlbnR9XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBodG1sICs9IGBcclxuPC9kaXY+XHJcbmA7XHJcblxyXG4gICAgICAgIGxldCB0b2FzdEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdG9hc3RFbC5pbm5lckhUTUwgPSBodG1sO1xyXG5cclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShDT05UQUlORVJfQ0xBU1MgKyAnICcgKyB0aGlzLnBvc2l0aW9uKVswXS5maXJzdENoaWxkLmFwcGVuZENoaWxkKHRvYXN0RWwpO1xyXG4gICAgICAgIEJzVG9hc3QudG9nZ2xlVG9hc3QodGhpcy5pZCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhdXNlX29uX2hvdmVyICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBsZXQgdGltZW91dCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wYXVzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIEJzVG9hc3QudG9nZ2xlVG9hc3QodGhpcy5pZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGltZW91dCwgdGhpcy5kZWxheSk7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGF1c2UgPSB0cnVlO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBtb3VzZUxlYXZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZnV0dXJlID0gcGFyc2VJbnQoZWxlbWVudC5jaGlsZHJlblswXS5kYXRhc2V0LmhpZGVUaW1lc3RhbXApO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucGF1c2UgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCA+PSBmdXR1cmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBCc1RvYXN0LnRvZ2dsZVRvYXN0KHRoaXMuaWQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBtb3VzZUxlYXZlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRvZ2dsZVRvYXN0KGlkLCBoaWRlID0gZmFsc2UpIHtcclxuICAgICAgICBpZiAoIXdpbmRvdy5qUXVlcnkgJiYgIXdpbmRvdy4kKSB7XHJcbiAgICAgICAgICAgIGxldCB0b2FzdCA9IG5ldyBib290c3RyYXAuVG9hc3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKTtcclxuICAgICAgICAgICAgaGlkZSA/IHRvYXN0LmhpZGUoKSA6IHRvYXN0LnNob3coKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKGAjJHtpZH1gKS50b2FzdChoaWRlID8gJ2hpZGUnIDogJ3Nob3cnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,