!function(t){t.toast=function(e){t("#toast-container").length||(t("body").prepend('<div id="toast-container" aria-live="polite" aria-atomic="true"></div>'),t("#toast-container").append('<div id="toast-wrapper"></div>'),t("body").on("hidden.bs.toast",".toast",function(){t(this).remove()}));var a="toast-"+(t(".toast").length+1),s="",i="",o="",n="text-muted",r="",d=e.title||"Notice!",l=e.subtitle||"",c=e.content||"",h=e.type||"info",u=e.delay||-1,m=e.img,p=e.pause_on_hover||!1,w=!1,v="";switch(h){case"info":i="bg-info",o="text-white",n="text-white",r="text-white";break;case"success":i="bg-success",o="text-white",n="text-white",r="text-white";break;case"warning":case"warn":i="bg-warning",o="text-white",n="text-white",r="text-white";break;case"error":case"danger":i="bg-danger",o="text-white",n="text-white",r="text-white"}!1!==p?(v='data-autohide="false"',p='data-hide-timestamp="'+(Math.floor(Date.now()/1e3)+u/1e3)+'"'):v=-1===u?'data-autohide="false"':'data-delay="'+u+'"';s='<div id="'+a+'" class="toast" role="alert" aria-live="assertive" aria-atomic="true" '+v+" "+p+">",s+='<div class="toast-header '+i+" "+o+'">',void 0!==m&&(s+='<img src="'+m.src+'" class="'+(m.class||"")+' mr-2" alt="'+(m.alt||"Image")+'" '+(void 0!==m.title?'data-toggle="tooltip" title="'+m.title+'"':"")+">"),s+='<strong class="mr-auto">'+d+"</strong>",s+='<small class="'+n+'">'+l+"</small>",s+='<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">',s+='<span aria-hidden="true" class="'+r+'">&times;</span>',s+="</button>",s+="</div>",""!==c&&(s+='<div class="toast-body">',s+=c,s+="</div>"),s+="</div>",t("#toast-wrapper").append(s),t("#toast-wrapper .toast:last").toast("show"),!1!==p&&(setTimeout(function(){w||t("#"+a).toast("hide")},u),t(document).on("mouseover","#"+a,function(){w=!0}),t(document).on("mouseleave","#"+a,function(){var e=Math.floor(Date.now()/1e3),a=parseInt(t(this).data("hide-timestamp"));w=!1,e>=a&&t(this).toast("hide")}))}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,