!function(b){b.toast=function(t){b("#toast-container").length||(b("body").prepend('<div id="toast-container" aria-live="polite" aria-atomic="true"></div>'),b("#toast-container").append('<div id="toast-wrapper"></div>'),b("body").on("hidden.bs.toast",".toast",function(){b(this).remove()}));var a="toast-"+(b(".toast").length+1),e="",s="",o="",i="text-muted",n="",r=t.title||"Notice!",d=t.subtitle||"",l=t.content||"",c=t.type||"info",u=t.delay||-1,m=t.img,h=t.pause_on_hover||!1,p=!1,v="";switch(c){case"info":s="bg-info",n=i=o="text-white";break;case"success":s="bg-success",n=i=o="text-white";break;case"warning":case"warn":s="bg-warning",n=i=o="text-white";break;case"error":case"danger":s="bg-danger",n=i=o="text-white"}!1!==h?(v='data-autohide="false"',h='data-hide-timestamp="'+(Math.floor(Date.now()/1e3)+u/1e3)+'"'):v=-1===u?'data-autohide="false"':'data-delay="'+u+'"';e='<div id="'+a+'" class="toast" role="alert" aria-live="assertive" aria-atomic="true" '+v+" "+h+">",e+='<div class="toast-header '+s+" "+o+'">',void 0!==m&&(e+='<img src="'+m.src+'" class="'+(m.class||"")+' mr-2" alt="'+(m.alt||"Image")+'" '+(void 0!==m.title?'data-toggle="tooltip" title="'+m.title+'"':"")+">"),e+='<strong class="mr-auto">'+r+"</strong>",e+='<small class="'+i+'">'+d+"</small>",e+='<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">',e+='<span aria-hidden="true" class="'+n+'">&times;</span>',e+="</button>",e+="</div>",""!==l&&(e+='<div class="toast-body">',e+=l,e+="</div>"),e+="</div>",b("#toast-wrapper").append(e),b("#toast-wrapper .toast:last").toast("show"),!1!==h&&(setTimeout(function(){p||b("#"+a).toast("hide")},u),b(document).on("mouseover","#"+a,function(){p=!0}),b(document).on("mouseleave","#"+a,function(){var t=Math.floor(Date.now()/1e3),a=parseInt(b(this).data("hide-timestamp"));p=!1,a<=t&&b(this).toast("hide")}))}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,